#summary The general logic of the server
#labels Phase-Design

= Server General Logic =

Here is how it works.

  * It is known that the only way to modify the gamestate is through *actions*.
  * The server receives a *command* from HTTP. In order to identify the context of the command, each command is supplemented with a respective Game ID (can be omitted when the command is not specific-game related) and User ID (mandatory), issuing the command.
  * The server parses, validates and dispatches the command to the corresponding logic, mapping it to a class member function and passing it any extra parameters that were given through the request.
  * The command-mapped function gets called by the dispatcher, returning a value of whether or not the execution of the command went smoothly.
  * The dispatcher logs the command along with its resulting status and gives the command result back to the requester.

This model allows extensibility to cover any other turn-based game. It is apparent that there is no Monopoly-specific point anywhere in the list.


= Commands and Actions =

It should be pointed out that the flow of requests and responses are asynchronous. As a response to a command the server sends only whether or not the command execution went fine, and if not fine - what the problem was. The gamestate changes are tracked by the clients separately. The client which initiated the action, however, knows there is a new action (gamestate change data) to receive when it gets a positive response for its command.

Each action is tracked with an automatically incrementing unique identifier within the context of the game. Each client participating in the game can request all gamestate change actions after any action ID they need. This makes it simple for the clients to load the saved games, tracking the changes from the beginning to the current state.



For example (> = Command, < = Command Response):

  * > make turn
  * < ok

-/ asynchronously /-

  * > getState(4)   // get whatever happened after the 4th action
  * < xml array of the gamestate changes that occured (not drafted yet)